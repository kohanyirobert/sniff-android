apply plugin: 'com.android.application'

ext {
    targetPackage = 'com.github.kohanyirobert.sniff'
    settingApiUrl = 'api_url'
    settingApiKey = 'api_key'
}

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId targetPackage
        minSdkVersion 19
        targetSdkVersion 28
        versionCode 1
        versionName '1.0'
        testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    implementation 'com.android.support:design:28.0.0'
    implementation 'com.android.support:preference-v7:28.0.0'
    implementation 'com.mcxiaoke.volley:library:1.0.19'
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.mockito:mockito-all:1.10.19'
    androidTestImplementation 'com.android.support.test.uiautomator:uiautomator-v18:2.1.3'
    androidTestImplementation 'com.android.support:support-annotations:28.0.0'
    androidTestImplementation 'com.android.support.test:runner:0.5'
    androidTestImplementation 'com.android.support.test:rules:0.5'
    androidTestImplementation('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
}

def instrument(args) {
    def command = []
    if (System.getProperty('os.name').toLowerCase(Locale.ROOT).indexOf("win") != -1) {
        command.addAll(['cmd', '/c'])
    }
    command.addAll(['adb', 'shell', 'am', 'instrument'])
    command.addAll(args)
    command.add("${targetPackage}/${targetPackage}.SniffInstrumentation")
    return command
}

task initSettings(type: Exec) {
    def local = new Properties()
    file('../local.properties').withInputStream {
        local.load(it)
    }
    doFirst {
        println "initializing settings: $local"
    }
    commandLine(instrument([
            '-e', settingApiUrl, local[settingApiUrl],
            '-e', settingApiKey, local[settingApiKey],
    ]))
    doLast {
        println 'settings initialized'
    }
}

task clearSettings(type: Exec) {
    doFirst {
        println 'clearing settings'
    }
    commandLine(instrument([
            '-e', settingApiUrl, "''",
            '-e', settingApiKey, "''",
    ]))
    doLast {
        println 'settings cleared'
    }
}
